# -*- coding: utf-8 -*-
"""Act 3 IA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W75geoqzS70LiqOeIdJQfdrby1iLtSmH
"""

#MODELO DE APRENDIZAJE SUPERVISADO

import heapq

from sklearn.ensemble import RandomForestClassifier

from sklearn.model_selection import train_test_split

from sklearn.metrics import accuracy_score

import numpy as np



class Grafo:

    def __init__(self):

        self.vertices = {}

        self.indice_vertice = {}  # Diccionario para asignar un índice único a cada vértice



    def agregar_vertice(self, vertice):

        self.vertices[vertice] = {}

        self.indice_vertice[vertice] = len(self.indice_vertice)



    def agregar_arista(self, origen, destino, peso):

        self.vertices[origen][destino] = peso

        self.vertices[destino][origen] = peso



    def obtener_indice_vertice(self, vertice):

        return self.indice_vertice[vertice]



    def obtener_vertice_por_indice(self, indice):

        for vertice, idx in self.indice_vertice.items():

            if idx == indice:

                return vertice

        return None



    def obtener_vecinos(self, vertice):

        return self.vertices[vertice]



class SistemaTransporte:

    def __init__(self, grafo):

        self.grafo = grafo



    def entrenar_modelo(self, muestra_entrenamiento):

        # Preparar datos de entrenamiento

        X = []

        y = []

        for origen, destino, label in muestra_entrenamiento:

            X.append([self.grafo.obtener_indice_vertice(origen), self.grafo.obtener_indice_vertice(destino)])

            y.append(label)



        # Dividir los datos en entrenamiento y prueba

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)



        # Entrenar modelo RandomForestClassifier

        self.modelo = RandomForestClassifier(n_estimators=100, random_state=42)

        self.modelo.fit(X_train, y_train)



        # Calcular la precisión del modelo

        y_pred = self.modelo.predict(X_test)

        accuracy = accuracy_score(y_test, y_pred)

        print("Precisión del modelo:", accuracy)



    def predecir_ruta_optima(self, origen, destino):

        indice_origen = self.grafo.obtener_indice_vertice(origen)

        indice_destino = self.grafo.obtener_indice_vertice(destino)

        ruta_predicha = self.modelo.predict([[indice_origen, indice_destino]])

        return ruta_predicha[0]



# Ejemplo de uso

grafo = Grafo()

grafo.agregar_vertice("A")

grafo.agregar_vertice("B")

grafo.agregar_vertice("C")

grafo.agregar_vertice("D")

grafo.agregar_vertice("E")

grafo.agregar_vertice("F")



grafo.agregar_arista("A", "B", 5)

grafo.agregar_arista("B", "C", 3)

grafo.agregar_arista("C", "D", 7)

grafo.agregar_arista("B", "D", 6)

grafo.agregar_arista("A", "D", 10)

grafo.agregar_arista("D", "E", 8)

grafo.agregar_arista("D", "F", 6)

grafo.agregar_arista("B", "F", 12)

grafo.agregar_arista("A", "F", 18)



# Creamos una muestra de entrenamiento con ejemplos de rutas óptimas y no óptimas

muestra_entrenamiento = [

    ("A", "D", 1),  # Ruta A -> D (óptima)

    ("B", "D", 0),  # Ruta B -> D (no óptima)

    ("C", "B", 0),  # Ruta C -> B (no óptima)

    ("D", "E", 1),  # Ruta D -> E (óptima)

    ("A", "F", 0)   # Ruta A -> F (no óptima)

]



# Creamos una instancia del sistema de transporte y entrenamos el modelo

sistema_transporte = SistemaTransporte(grafo)

sistema_transporte.entrenar_modelo(muestra_entrenamiento)



# Predecir ruta óptima entre dos puntos

Ruta1 = input("Escriba la ruta de inicio ")

Ruta2 = input("Escriba la ruta de destino ")

ruta_optima = sistema_transporte.predecir_ruta_optima(Ruta1, Ruta2)

if ruta_optima:

    print("La ruta óptima es:", grafo.obtener_vertice_por_indice(ruta_optima))

else:

    print("No se encontró una ruta óptima entre los puntos especificados.")